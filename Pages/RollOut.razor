
<MudPaper Elevation="0" Class="p-3">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large">
        @for (var i = 1; i <= N; i++)
        {
            var a = i;
            <MudButton @onclick="() => Rolls = doRoll(a).ToList()">@a</MudButton>
        }
    </MudButtonGroup>
</MudPaper>

<MudPaper Elevation="0" Class="p-3">
    <MudTooltip Arrow="true" Placement="Placement.Right" Text="@string.Join(" ",Rolls)">
        <MudButton Color="Color.Info" Size="Size.Large" Variant="Variant.Filled" Label="true"> @Calc(Rolls, D)</MudButton>
    </MudTooltip>
</MudPaper>


@code
{
    [Parameter]
    public int N { get; set; }
    [Parameter]
    public int Major { get; set; }
    [Parameter]
    public int Minor { get; set; }
    [Parameter]
    public int Miss { get; set; }

    [Parameter]
    public int D { get; set; }
    Random r = new();

    public IEnumerable<int>
    doRoll(int n)
    {
        for (var i = 0; i < n; i++)
        {
            var o = r.Next(11);
            Console.WriteLine(o);
            yield return o;
        }
    }

    public List<int> Rolls { get; set; } = new List<int>();



    public int Calc(List<int> rolls, int difficulty)
    {
        var result = 0;

        var non_misses = rolls.Distinct();
        var majors = non_misses.Where(x => x > difficulty);
        var minors = non_misses.Where(x => x <= difficulty);

        result += Major * majors.Count();
        Console.WriteLine($"Major = {Major} * {majors.Count()}");
        result += Minor * minors.Count();
        Console.WriteLine($"Minor = {Minor} * {minors.Count()}");

        result -= Miss * (rolls.Count() - non_misses.Count());

        return result;
    }
}
